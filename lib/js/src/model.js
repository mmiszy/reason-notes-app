// Generated by BUCKLESCRIPT VERSION 1.8.0, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Notes_utils = require("./notes_utils.js");

var _notes = [/* [] */0];

function clearNotes() {
  _notes[/* contents */0] = /* [] */0;
  return /* () */0;
}

function loadNotes() {
  var match = localStorage.getItem("notes");
  var loadedNotes = match !== null ? Notes_utils.notesFromJson(JSON.parse(match)) : /* [] */0;
  _notes[/* contents */0] = List.length(loadedNotes) > 0 ? loadedNotes : /* :: */[
      /* record */[
        /* text */"",
        /* id */"1"
      ],
      /* [] */0
    ];
  return /* () */0;
}

function saveNotes() {
  var notesJson = Notes_utils.notesToJson(_notes[/* contents */0]);
  localStorage.setItem("notes", notesJson);
  return /* () */0;
}

function addNote(note) {
  var id = Pervasives.string_of_int(List.length(_notes[/* contents */0]) + 1 | 0);
  var newNote = /* record */[
    /* text */note[/* text */0],
    /* id */id
  ];
  _notes[/* contents */0] = Pervasives.$at(_notes[/* contents */0], /* :: */[
        newNote,
        /* [] */0
      ]);
  return newNote;
}

function updateNote(note) {
  _notes[/* contents */0] = List.map((function (n) {
          if (n[/* id */1] === note[/* id */1]) {
            return note;
          } else {
            return n;
          }
        }), _notes[/* contents */0]);
  return note;
}

function getNotes() {
  return _notes[/* contents */0];
}

function deleteNote(id) {
  _notes[/* contents */0] = List.filter((function (n) {
            return +(n[/* id */1] !== id);
          }))(_notes[/* contents */0]);
  return /* () */0;
}

exports._notes     = _notes;
exports.clearNotes = clearNotes;
exports.loadNotes  = loadNotes;
exports.saveNotes  = saveNotes;
exports.addNote    = addNote;
exports.updateNote = updateNote;
exports.getNotes   = getNotes;
exports.deleteNote = deleteNote;
/* Notes_utils Not a pure module */
