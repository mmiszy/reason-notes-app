// Generated by BUCKLESCRIPT VERSION 1.8.0, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var $$Array     = require("bs-platform/lib/js/array.js");
var Js_dict     = require("bs-platform/lib/js/js_dict.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Json_decode = require("bs-json/lib/js/src/json_decode.js");

var _notes = [/* [] */0];

function noteFromJson(json) {
  return /* record */[
          /* text */Json_decode.field("text", Json_decode.string, json),
          /* id */Json_decode.field("id", Json_decode.string, json)
        ];
}

function notesFromJson(json) {
  return Json_decode.list(noteFromJson, json);
}

var match = localStorage.getItem("notes");

var loadedNotes;

if (match !== null) {
  var json = JSON.parse(match);
  loadedNotes = Json_decode.list(noteFromJson, json);
} else {
  loadedNotes = /* [] */0;
}

_notes[/* contents */0] = List.length(loadedNotes) > 0 ? loadedNotes : /* :: */[
    /* record */[
      /* text */"",
      /* id */"1"
    ],
    /* [] */0
  ];

function saveNotes() {
  var notesJson = JSON.stringify($$Array.map((function (param) {
              var text = param[/* text */0];
              return Js_dict.fromList(/* :: */[
                          /* tuple */[
                            "text",
                            text
                          ],
                          /* :: */[
                            /* tuple */[
                              "id",
                              param[/* id */1]
                            ],
                            /* [] */0
                          ]
                        ]);
            }), $$Array.of_list(_notes[/* contents */0])));
  localStorage.setItem("notes", notesJson);
  return /* () */0;
}

function addNote(note) {
  var id = Pervasives.string_of_int(List.length(_notes[/* contents */0]) + 1 | 0);
  var newNote = /* record */[
    /* text */note[/* text */0],
    /* id */id
  ];
  _notes[/* contents */0] = Pervasives.$at(_notes[/* contents */0], /* :: */[
        newNote,
        /* [] */0
      ]);
  saveNotes(/* () */0);
  return newNote;
}

function updateNote(note) {
  _notes[/* contents */0] = List.map((function (n) {
          if (n[/* id */1] === note[/* id */1]) {
            return note;
          } else {
            return n;
          }
        }), _notes[/* contents */0]);
  saveNotes(/* () */0);
  return note;
}

function getNotes() {
  return _notes[/* contents */0];
}

function deleteNote(id) {
  _notes[/* contents */0] = List.filter((function (n) {
            return +(n[/* id */1] !== id);
          }))(_notes[/* contents */0]);
  saveNotes(/* () */0);
  return /* () */0;
}

exports._notes        = _notes;
exports.noteFromJson  = noteFromJson;
exports.notesFromJson = notesFromJson;
exports.loadedNotes   = loadedNotes;
exports.saveNotes     = saveNotes;
exports.addNote       = addNote;
exports.updateNote    = updateNote;
exports.getNotes      = getNotes;
exports.deleteNote    = deleteNote;
/* match Not a pure module */
