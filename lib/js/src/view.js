// Generated by BUCKLESCRIPT VERSION 1.8.0, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var Model                   = require("./model.js");
var ElementRe               = require("bs-webapi/lib/js/src/dom/nodes/elementRe.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function getFormElement() {
  var match = document.querySelector("form");
  if (match !== null) {
    return match;
  } else {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "getFormElement failed"
        ];
  }
}

function getTextarea() {
  var match = getFormElement(/* () */0).querySelector("textarea");
  if (match !== null) {
    return match;
  } else {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "getTextarea failed"
        ];
  }
}

function getList() {
  var match = document.querySelector("ul");
  if (match !== null) {
    return match;
  } else {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "getList failed"
        ];
  }
}

function selectNote(note) {
  var form = getFormElement(/* () */0);
  form.setAttribute("data-note-id", note[/* id */1]);
  getTextarea(/* () */0).value = note[/* text */0];
  return /* () */0;
}

function updateList() {
  var list = getList(/* () */0);
  list.innerHTML = "";
  List.iter((function (note) {
          var li = document.createElement("li");
          li.textContent = note[/* text */0];
          li.addEventListener("click", (function () {
                  selectNote(Model.getNoteById(note[/* id */1]));
                  return /* () */0;
                }));
          li.setAttribute("data-note-id", note[/* id */1]);
          list.appendChild(li);
          return /* () */0;
        }), Model.getNotes(/* () */0));
  Model.saveNotes(/* () */0);
  return /* () */0;
}

function createList() {
  var container = document.createElement("div");
  container.id = "notes-list-container";
  var ul = document.createElement("ul");
  ul.id = "notes-list";
  var button = document.createElement("button");
  button.id = "add-note-button";
  button.innerText = "Dodaj";
  container.appendChild(ul);
  container.appendChild(button);
  button.addEventListener("click", (function () {
          Model.addNote(/* record */[/* text */""]);
          updateList(/* () */0);
          return /* () */0;
        }));
  return container;
}

function onInput() {
  var textarea = getTextarea(/* () */0);
  var form = getFormElement(/* () */0);
  var match = ElementRe.asHtmlElement(textarea);
  var $js;
  if (match) {
    $js = match[0];
  } else {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "lol"
        ];
  }
  var text = $js.value;
  var match$1 = form.getAttribute("data-note-id");
  if (match$1 !== null) {
    Model.updateNote(/* record */[
          /* text */text,
          /* id */match$1
        ]);
    Model.saveNotes(/* () */0);
  } else {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "data-note-id missing"
        ];
  }
  updateList(/* () */0);
  return /* () */0;
}

function createForm() {
  var form = document.createElement("form");
  form.id = "note-form";
  var textarea = document.createElement("textarea");
  form.appendChild(textarea);
  textarea.addEventListener("input", onInput);
  return form;
}

function init(mainSelector) {
  Model.loadNotes(/* () */0);
  var match = document.querySelector(mainSelector);
  var mainEl;
  if (match !== null) {
    mainEl = match;
  } else {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "document.querySelector " + mainSelector
        ];
  }
  var listEl = createList(/* () */0);
  var formEl = createForm(/* () */0);
  mainEl.appendChild(listEl);
  mainEl.appendChild(formEl);
  var note = List.nth(Model.getNotes(/* () */0), 0);
  selectNote(note);
  updateList(/* () */0);
  return /* () */0;
}

exports.getFormElement = getFormElement;
exports.getTextarea    = getTextarea;
exports.getList        = getList;
exports.selectNote     = selectNote;
exports.updateList     = updateList;
exports.createList     = createList;
exports.onInput        = onInput;
exports.createForm     = createForm;
exports.init           = init;
/* Model Not a pure module */
