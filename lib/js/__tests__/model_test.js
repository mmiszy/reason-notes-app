// Generated by BUCKLESCRIPT VERSION 1.8.0, PLEASE EDIT WITH CARE
'use strict';

var Jest  = require("bs-jest/lib/js/src/jest.js");
var List  = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Model = require("../src/model.js");

afterEach((function () {
        return Model.clearNotes(/* () */0);
      }));

Jest.test("it should return empty list initially", (function () {
        return Curry._2(Jest.Expect[/* toEqual */11], /* [] */0, Curry._1(Jest.Expect[/* expect */0], Model.getNotes(/* () */0)));
      }));

Jest.test("it should add note", (function () {
        var newNote = Model.addNote(/* record */[/* text */"test"]);
        return Curry._2(Jest.Expect[/* toEqual */11], /* record */[
                    /* text */"test",
                    /* id */"1"
                  ], Curry._1(Jest.Expect[/* expect */0], newNote));
      }));

Jest.test("it should get note after adding", (function () {
        Model.addNote(/* record */[/* text */"test"]);
        return Curry._2(Jest.Expect[/* toEqual */11], /* :: */[
                    /* record */[
                      /* text */"test",
                      /* id */"1"
                    ],
                    /* [] */0
                  ], Curry._1(Jest.Expect[/* expect */0], Model.getNotes(/* () */0)));
      }));

Jest.test("it should add multiple notes", (function () {
        Model.addNote(/* record */[/* text */"test1"]);
        Model.addNote(/* record */[/* text */"test2"]);
        Model.addNote(/* record */[/* text */"test3"]);
        Curry._2(Jest.Expect[/* toEqual */11], 3, Curry._1(Jest.Expect[/* expect */0], List.length(Model.getNotes(/* () */0))));
        return Curry._2(Jest.Expect[/* toEqual */11], /* :: */[
                    /* record */[
                      /* text */"test1",
                      /* id */"1"
                    ],
                    /* :: */[
                      /* record */[
                        /* text */"test2",
                        /* id */"2"
                      ],
                      /* :: */[
                        /* record */[
                          /* text */"test3",
                          /* id */"3"
                        ],
                        /* [] */0
                      ]
                    ]
                  ], Curry._1(Jest.Expect[/* expect */0], Model.getNotes(/* () */0)));
      }));

Jest.test("it should get note by id", (function () {
        Model.addNote(/* record */[/* text */"test1"]);
        Model.addNote(/* record */[/* text */"test2"]);
        Model.addNote(/* record */[/* text */"test3"]);
        return Curry._2(Jest.Expect[/* toEqual */11], /* record */[
                    /* text */"test2",
                    /* id */"2"
                  ], Curry._1(Jest.Expect[/* expect */0], Model.getNoteById("2")));
      }));

Jest.test("it should update given note", (function () {
        Model.addNote(/* record */[/* text */"test1"]);
        Model.addNote(/* record */[/* text */"test2"]);
        Model.addNote(/* record */[/* text */"test3"]);
        Model.updateNote(/* record */[
              /* text */"test changed",
              /* id */"2"
            ]);
        var updatedNote = List.find((function (note) {
                return +(note[/* id */1] === "2");
              }), Model.getNotes(/* () */0));
        return Curry._2(Jest.Expect[/* toEqual */11], "test changed", Curry._1(Jest.Expect[/* expect */0], updatedNote[/* text */0]));
      }));

Jest.test("it should not update anything if wrong id is given", (function () {
        Model.addNote(/* record */[/* text */"test1"]);
        Model.addNote(/* record */[/* text */"test2"]);
        Model.addNote(/* record */[/* text */"test3"]);
        Model.updateNote(/* record */[
              /* text */"test changed",
              /* id */"LOL WRONG ID"
            ]);
        return Curry._2(Jest.Expect[/* toEqual */11], /* :: */[
                    /* record */[
                      /* text */"test1",
                      /* id */"1"
                    ],
                    /* :: */[
                      /* record */[
                        /* text */"test2",
                        /* id */"2"
                      ],
                      /* :: */[
                        /* record */[
                          /* text */"test3",
                          /* id */"3"
                        ],
                        /* [] */0
                      ]
                    ]
                  ], Curry._1(Jest.Expect[/* expect */0], Model.getNotes(/* () */0)));
      }));

Jest.test("it should delete given note", (function () {
        Model.addNote(/* record */[/* text */"test1"]);
        Model.addNote(/* record */[/* text */"test2"]);
        Model.addNote(/* record */[/* text */"test3"]);
        Model.deleteNote("2");
        return Curry._2(Jest.Expect[/* toEqual */11], /* :: */[
                    /* record */[
                      /* text */"test1",
                      /* id */"1"
                    ],
                    /* :: */[
                      /* record */[
                        /* text */"test3",
                        /* id */"3"
                      ],
                      /* [] */0
                    ]
                  ], Curry._1(Jest.Expect[/* expect */0], Model.getNotes(/* () */0)));
      }));

Jest.test("it should not delete anything if wrong id is given", (function () {
        Model.addNote(/* record */[/* text */"test1"]);
        Model.addNote(/* record */[/* text */"test2"]);
        Model.addNote(/* record */[/* text */"test3"]);
        Model.deleteNote("LOL WRONG ID");
        return Curry._2(Jest.Expect[/* toEqual */11], /* :: */[
                    /* record */[
                      /* text */"test1",
                      /* id */"1"
                    ],
                    /* :: */[
                      /* record */[
                        /* text */"test2",
                        /* id */"2"
                      ],
                      /* :: */[
                        /* record */[
                          /* text */"test3",
                          /* id */"3"
                        ],
                        /* [] */0
                      ]
                    ]
                  ], Curry._1(Jest.Expect[/* expect */0], Model.getNotes(/* () */0)));
      }));

/*  Not a pure module */
